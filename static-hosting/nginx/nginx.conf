worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'site="$site_name" path="$minio_path"';
    
    access_log /var/log/nginx/access.log main;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # MinIO upstream
    upstream minio {
        server minio.minio.svc:9000;
    }
    
    # Map to determine site name from subdomain or path
    map $host $site_from_subdomain {
        ~^(?<site>[^.]+)\.sites\.apps\.example\.com$ $site;
        default "";
    }
    
    map $uri $site_from_path {
        ~^/publish/(?<site>[^/]+)/ $site;
        default "";
    }
    
    # Determine which site to serve
    map $site_from_subdomain$site_from_path $site_name {
        ~^(.+)$ $1;
        default $site_from_path;
    }
    
    # Determine MinIO path based on routing method
    map $site_from_subdomain $minio_path_base {
        "" /sites/$site_from_path;
        default /sites/$site_from_subdomain;
    }
    
    # Clean URI for MinIO (remove /publish/<site>/ prefix if present)
    map $uri $clean_uri {
        ~^/publish/[^/]+(?<path>/.*)$ $path;
        default $uri;
    }
    
    # Final MinIO path
    map $minio_path_base$clean_uri $minio_path {
        ~^(.+)$ $1;
        default $minio_path_base/;
    }
    
    # Default server (catch-all)
    server {
        listen 8080 default_server;
        server_name _;
        
        return 404 '{"error": "Site not found", "message": "Please check the subdomain or path"}';
        add_header Content-Type application/json;
    }
    
    # Main server for static site hosting
    server {
        listen 8080;
        server_name ~^(?<site>[^.]+)\.sites\.apps\.example\.com$ sites.apps.example.com;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Main location for static files
        location / {
            # Only proceed if we have a valid site name
            if ($site_name = "") {
                return 404 '{"error": "Invalid site", "message": "Site name could not be determined"}';
            }
            
            # Set variables for this request
            set $backend_url http://minio$minio_path;
            
            # Proxy to MinIO
            proxy_pass $backend_url;
            proxy_set_header Host minio.minio.svc:9000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle MinIO response headers
            proxy_hide_header x-amz-request-id;
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-storage-class;
            proxy_hide_header x-amz-server-side-encryption;
            proxy_hide_header Set-Cookie;
            
            # Cache static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass $backend_url;
                proxy_set_header Host minio.minio.svc:9000;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # SPA fallback - serve index.html on 404
            error_page 404 = @spa_fallback;
        }
        
        # SPA fallback handler
        location @spa_fallback {
            # Check if this site should use SPA mode by trying to get site config
            # For now, always attempt SPA fallback for 404s
            set $spa_url http://minio/sites/$site_name/index.html;
            
            proxy_pass $spa_url;
            proxy_set_header Host minio.minio.svc:9000;
            proxy_intercept_errors off;
            
            # If index.html also doesn't exist, show proper 404
            error_page 404 = @final_404;
        }
        
        # Final 404 handler
        location @final_404 {
            return 404 '{"error": "Site not found", "site": "$site_name", "message": "The requested site does not exist or has no content"}';
            add_header Content-Type application/json;
        }
    }
    
    # Server for path-based routing (/publish/<site>/...)
    server {
        listen 8080;
        server_name sites.apps.example.com;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Path-based routing
        location ~* ^/publish/(?<site>[^/]+)(?<path>/.*)$ {
            set $backend_url http://minio/sites/$site$path;
            
            # Proxy to MinIO
            proxy_pass $backend_url;
            proxy_set_header Host minio.minio.svc:9000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle MinIO response headers
            proxy_hide_header x-amz-request-id;
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-storage-class;
            proxy_hide_header x-amz-server-side-encryption;
            proxy_hide_header Set-Cookie;
            
            # SPA fallback for path-based routing
            error_page 404 = @path_spa_fallback;
        }
        
        # SPA fallback for path-based routing
        location @path_spa_fallback {
            # Extract site name from original URI
            if ($uri ~ ^/publish/([^/]+)/.*$) {
                set $spa_site $1;
            }
            
            set $spa_url http://minio/sites/$spa_site/index.html;
            
            proxy_pass $spa_url;
            proxy_set_header Host minio.minio.svc:9000;
            proxy_intercept_errors off;
        }
        
        # Default location for /publish without site
        location /publish/ {
            return 400 '{"error": "Missing site name", "message": "Usage: /publish/<site-name>/path"}';
            add_header Content-Type application/json;
        }
        
        # Root redirect
        location = / {
            return 200 '{"service": "Static Site Hosting", "usage": {"subdomain": "<site>.sites.apps.example.com", "path": "/publish/<site>/"}}';
            add_header Content-Type application/json;
        }
    }
}